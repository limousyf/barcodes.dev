{
	"info": {
		"_postman_id": "b2c3d4e5-f6g7-8901-bcde-f23456789012",
		"name": "Barcode Generator API with Validation Tests",
		"description": "Comprehensive test collection for the Barcode Generator API with automated validation tests for responses, status codes, and error handling.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Barcode API Tests",
			"item": [
				{
					"name": "Nominal Cases",
					"item": [
						{
							"name": "Generate Code128 Barcode (PNG)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an image\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
											"});",
											"",
											"pm.test(\"Content-Type matches PNG format\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('png');",
											"});",
											"",
											"pm.test(\"Response body is not empty\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.greaterThan(1000);",
											"});",
											"",
											"pm.test(\"Has Content-Disposition header\", function () {",
											"    pm.expect(pm.response.headers.has('Content-Disposition')).to.be.true;",
											"});",
											"",
											"pm.test(\"Response time is acceptable\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"TEST123456\",\n    \"barcode_type\": \"code128\",\n    \"image_format\": \"PNG\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/barcode",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"barcode"
									]
								}
							}
						},
						{
							"name": "Generate EAN13 Barcode (JPEG)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an image\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
											"});",
											"",
											"pm.test(\"Content-Type matches JPEG format\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('jpeg');",
											"});",
											"",
											"pm.test(\"Response body size is reasonable\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.greaterThan(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"1234567890123\",\n    \"barcode_type\": \"ean13\",\n    \"image_format\": \"JPEG\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/barcode",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"barcode"
									]
								}
							}
						},
						{
							"name": "Generate Code39 Barcode (WEBP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an image\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
											"});",
											"",
											"pm.test(\"Content-Type matches WEBP format\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('webp');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"HELLO123\",\n    \"barcode_type\": \"code39\",\n    \"image_format\": \"WEBP\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/barcode",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"barcode"
									]
								}
							}
						}
					]
				},
				{
					"name": "Error Cases & Validation",
					"item": [
						{
							"name": "Missing Text Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is JSON\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response has error field\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property('error');",
											"    pm.expect(responseJson.error).to.equal('Missing required parameter: text');",
											"});",
											"",
											"pm.test(\"Response has message field\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property('message');",
											"    pm.expect(responseJson.message).to.include('text parameter is required');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"barcode_type\": \"code128\",\n    \"image_format\": \"PNG\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/barcode",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"barcode"
									]
								}
							}
						},
						{
							"name": "Empty Text Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response contains error about empty text\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.error).to.equal('Missing required parameter: text');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"\",\n    \"barcode_type\": \"code128\",\n    \"image_format\": \"PNG\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/barcode",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"barcode"
									]
								}
							}
						},
						{
							"name": "Invalid Barcode Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response contains invalid barcode_type error\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.error).to.equal('Invalid barcode_type');",
											"    pm.expect(responseJson).to.have.property('provided');",
											"    pm.expect(responseJson.provided).to.equal('invalid_type');",
											"});",
											"",
											"pm.test(\"Response includes valid barcode types\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.message).to.include('code128');",
											"    pm.expect(responseJson.message).to.include('ean13');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"TEST123\",\n    \"barcode_type\": \"invalid_type\",\n    \"image_format\": \"PNG\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/barcode",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"barcode"
									]
								}
							}
						},
						{
							"name": "Invalid Image Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response contains invalid image_format error\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.error).to.equal('Invalid image_format');",
											"    pm.expect(responseJson.provided).to.equal('BMP');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"TEST123\",\n    \"barcode_type\": \"code128\",\n    \"image_format\": \"BMP\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/barcode",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"barcode"
									]
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "QR Code API Tests",
			"item": [
				{
					"name": "Nominal Cases",
					"item": [
						{
							"name": "Generate Basic QR Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an image\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
											"});",
											"",
											"pm.test(\"Response body is not empty\", function () {",
											"    pm.expect(pm.response.responseSize).to.be.greaterThan(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Hello World!\",\n    \"image_format\": \"PNG\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/qrcode",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"qrcode"
									]
								}
							}
						},
						{
							"name": "Generate QR Code with Custom Colors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is an image\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
											"});",
											"",
											"pm.test(\"Content-Type matches PNG format\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('png');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Custom colored QR code\",\n    \"fill_color\": \"#FF0000\",\n    \"back_color\": \"#FFFF00\",\n    \"image_format\": \"PNG\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/qrcode",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"qrcode"
									]
								}
							}
						}
					]
				},
				{
					"name": "Error Cases & Validation",
					"item": [
						{
							"name": "Missing Text Parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is JSON\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response has correct error message\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.error).to.equal('Missing required parameter: text');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"image_format\": \"PNG\",\n    \"fill_color\": \"#000000\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/qrcode",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"qrcode"
									]
								}
							}
						},
						{
							"name": "Invalid Error Correction Level",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response contains invalid error_correction error\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.error).to.equal('Invalid error_correction');",
											"    pm.expect(responseJson.provided).to.equal('X');",
											"});",
											"",
											"pm.test(\"Response includes valid error correction levels\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.message).to.include('L, M, Q, H');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Test QR\",\n    \"error_correction\": \"X\",\n    \"image_format\": \"PNG\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/qrcode",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"qrcode"
									]
								}
							}
						},
						{
							"name": "Invalid Box Size (Too Large)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response contains invalid box_size error\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.error).to.equal('Invalid box_size');",
											"    pm.expect(responseJson.provided).to.equal(100);",
											"});",
											"",
											"pm.test(\"Response includes valid range\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.message).to.include('between 1 and 50');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Test QR\",\n    \"box_size\": 100,\n    \"image_format\": \"PNG\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/qrcode",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"qrcode"
									]
								}
							}
						},
						{
							"name": "Invalid Fill Color",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response contains invalid fill_color error\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.error).to.equal('Invalid fill_color');",
											"    pm.expect(responseJson.provided).to.equal('red');",
											"});",
											"",
											"pm.test(\"Response includes color format example\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.message).to.include('#000000');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Test QR\",\n    \"fill_color\": \"red\",\n    \"image_format\": \"PNG\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/qrcode",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"qrcode"
									]
								}
							}
						},
						{
							"name": "Invalid Numeric Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response contains numeric parameter error\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.error).to.equal('Invalid numeric parameter');",
											"});",
											"",
											"pm.test(\"Response explains valid integer requirement\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.message).to.include('valid integers');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Test QR\",\n    \"box_size\": \"not_a_number\",\n    \"border\": \"also_not_a_number\",\n    \"image_format\": \"PNG\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/qrcode",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"qrcode"
									]
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "System & Debug Endpoints",
			"item": [
				{
					"name": "Database Status Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains database status\", function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('Database Status Report');",
									"    pm.expect(responseText).to.include('Connection Test');",
									"});",
									"",
									"pm.test(\"Database connection is successful\", function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('✅ Database connection successful');",
									"});",
									"",
									"pm.test(\"All required columns exist\", function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('debug_headers column exists');",
									"    pm.expect(responseText).to.include('success column exists');",
									"    pm.expect(responseText).to.include('error_message column exists');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/db-status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"db-status"
							]
						}
					}
				},
				{
					"name": "Run Schema Migration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Migration completed message\", function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('Schema migration completed');",
									"});",
									"",
									"pm.test(\"Response time is reasonable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/migrate-schema",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"migrate-schema"
							]
						}
					}
				},
				{
					"name": "Main Page (Health Check)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
									"});",
									"",
									"pm.test(\"Page contains expected content\", function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('Barcode Generator');",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						}
					}
				},
				{
					"name": "Debug Headers (Recent Requests)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains debug information\", function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.length).to.be.greaterThan(10);",
									"});",
									"",
									"pm.test(\"Response time is reasonable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/debug",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"debug"
							]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set timestamp for request tracking",
					"pm.globals.set('timestamp', new Date().toISOString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test - check response time",
					"pm.test('Response time is within acceptable range', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(30000);",
					"});",
					"",
					"// Global test - check for server errors",
					"pm.test('No server errors (5xx)', function () {",
					"    pm.expect(pm.response.code).to.be.below(500);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://34.49.2.152",
			"type": "string"
		},
		{
			"key": "local_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "production_url",
			"value": "https://barcodes.dev",
			"type": "string"
		}
	]
}